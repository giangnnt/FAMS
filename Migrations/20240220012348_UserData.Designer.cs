// <auto-generated />
using System;
using FAMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FAMS.Migrations
{
    [DbContext(typeof(FAMSContext))]
    [Migration("20240220012348_UserData")]
    partial class UserData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "English_United States.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FAMS.Models.AsessmentScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Assigment")
                        .HasColumnType("integer")
                        .HasColumnName("assigment");

                    b.Property<int?>("Final")
                        .HasColumnType("integer")
                        .HasColumnName("final");

                    b.Property<int?>("Finalpratical")
                        .HasColumnType("integer")
                        .HasColumnName("finalpratical");

                    b.Property<int?>("Finaltheory")
                        .HasColumnType("integer")
                        .HasColumnName("finaltheory");

                    b.Property<int?>("Gpa")
                        .HasColumnType("integer")
                        .HasColumnName("gpa");

                    b.Property<int?>("Quiz")
                        .HasColumnType("integer")
                        .HasColumnName("quiz");

                    b.Property<string>("Topiccode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("topiccode");

                    b.HasKey("Id");

                    b.HasIndex("Topiccode");

                    b.ToTable("AsessmentScheme");
                });

            modelBuilder.Entity("FAMS.Models.Class", b =>
                {
                    b.Property<Guid>("Classid")
                        .HasColumnType("uuid")
                        .HasColumnName("classid");

                    b.Property<string>("Classcode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("classcode");

                    b.Property<string>("Classname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("classname");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<string>("Duration")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<string>("Fsu")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fsu");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifiedat");

                    b.Property<Guid?>("Modifiedby")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedby");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Trainprogramcode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("trainprogramcode");

                    b.HasKey("Classid");

                    b.HasIndex("Createdby");

                    b.HasIndex("Trainprogramcode");

                    b.ToTable("class");
                });

            modelBuilder.Entity("FAMS.Models.ClassUser", b =>
                {
                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<Guid>("Classid")
                        .HasColumnType("uuid")
                        .HasColumnName("classid");

                    b.Property<string>("Usertype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usertype");

                    b.HasKey("Userid", "Classid")
                        .HasName("ClassUser_pkey");

                    b.HasIndex("Classid");

                    b.ToTable("ClassUser");
                });

            modelBuilder.Entity("FAMS.Models.Permission", b =>
                {
                    b.Property<string>("Permissionid")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("permissionid");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Permissionid");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("FAMS.Models.Permissionrole", b =>
                {
                    b.Property<string>("Permissionid")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("permissionid");

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Permissionid", "Roleid")
                        .HasName("permissionrole_pkey");

                    b.HasIndex("Roleid");

                    b.ToTable("permissionrole");
                });

            modelBuilder.Entity("FAMS.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("FAMS.Models.Syllabus", b =>
                {
                    b.Property<string>("Topiccode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("topiccode");

                    b.Property<string>("Courseobjective")
                        .HasColumnType("text")
                        .HasColumnName("courseobjective");

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<string>("Deliveryprinciple")
                        .HasColumnType("text")
                        .HasColumnName("deliveryprinciple");

                    b.Property<string>("Level")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("level");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifiedat");

                    b.Property<Guid?>("Modifiedby")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedby");

                    b.Property<string>("Technicalrequirement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("technicalrequirement");

                    b.Property<string>("Timelocation")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("timelocation");

                    b.Property<string>("Topicname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("topicname");

                    b.Property<string>("Trainingaudience")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trainingaudience");

                    b.Property<string>("Version")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("version");

                    b.HasKey("Topiccode")
                        .HasName("syllabus_pkey");

                    b.HasIndex("Createdby");

                    b.ToTable("syllabus");
                });

            modelBuilder.Entity("FAMS.Models.TrainingContent", b =>
                {
                    b.Property<string>("Contentname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contentname");

                    b.Property<string>("Deliverytype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("deliverytype");

                    b.Property<bool?>("Method")
                        .HasColumnType("boolean")
                        .HasColumnName("method");

                    b.Property<string>("Outputstandard")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("outputstandard");

                    b.Property<int?>("Trainingtime")
                        .HasColumnType("integer")
                        .HasColumnName("trainingtime");

                    b.Property<string>("Unitcode")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("unitcode");

                    b.HasIndex(new[] { "Unitcode" }, "TrainingContent_unitcode_key")
                        .IsUnique();

                    b.ToTable("TrainingContent");
                });

            modelBuilder.Entity("FAMS.Models.TrainingMaterial", b =>
                {
                    b.Property<string>("Fileupload")
                        .HasColumnType("text")
                        .HasColumnName("fileupload");

                    b.Property<string>("Unitcode")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("unitcode");

                    b.HasIndex(new[] { "Unitcode" }, "TrainingMaterial_unitcode_key")
                        .IsUnique();

                    b.ToTable("TrainingMaterial");
                });

            modelBuilder.Entity("FAMS.Models.TrainingProgramSyllabus", b =>
                {
                    b.Property<string>("Topiccode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("topiccode");

                    b.Property<string>("Trainingprogramcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trainingprogramcode");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sequence");

                    b.HasKey("Topiccode", "Trainingprogramcode")
                        .HasName("TrainingProgramSyllabus_pkey");

                    b.HasIndex("Trainingprogramcode");

                    b.ToTable("TrainingProgramSyllabus");
                });

            modelBuilder.Entity("FAMS.Models.TrainingUnit", b =>
                {
                    b.Property<string>("Unitcode")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("unitcode");

                    b.Property<int?>("Daynumber")
                        .HasColumnType("integer")
                        .HasColumnName("daynumber");

                    b.Property<string>("Topiccode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("topiccode");

                    b.Property<string>("Unitname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unitname");

                    b.HasKey("Unitcode")
                        .HasName("TrainingUnit_pkey");

                    b.HasIndex(new[] { "Topiccode" }, "TrainingUnit_topiccode_key")
                        .IsUnique();

                    b.ToTable("TrainingUnit");
                });

            modelBuilder.Entity("FAMS.Models.Trainingprogram", b =>
                {
                    b.Property<string>("Trainingprogramcode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("trainingprogramcode");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<Guid>("Createdby")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<string>("Duration")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifiedat");

                    b.Property<Guid?>("Modifiedby")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Topiccode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("topiccode");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Trainingprogramcode")
                        .HasName("trainingprogram_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("trainingprogram");
                });

            modelBuilder.Entity("FAMS.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<int?>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime>("Updateat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateat");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000012345"),
                            Createdat = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "FAMs@gmail.com",
                            Name = "Admin",
                            Password = "fams123",
                            Status = "Active",
                            Updateat = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FAMS.Models.AsessmentScheme", b =>
                {
                    b.HasOne("FAMS.Models.Syllabus", "TopiccodeNavigation")
                        .WithMany("AsessmentSchemes")
                        .HasForeignKey("Topiccode")
                        .HasConstraintName("AsessmentScheme_topiccode_fkey");

                    b.Navigation("TopiccodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.Class", b =>
                {
                    b.HasOne("FAMS.Models.User", "CreatedbyNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("class_createdby_fkey");

                    b.HasOne("FAMS.Models.Trainingprogram", "TrainprogramcodeNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("Trainprogramcode")
                        .HasConstraintName("class_trainprogramcode_fkey");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("TrainprogramcodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.ClassUser", b =>
                {
                    b.HasOne("FAMS.Models.Class", "Class")
                        .WithMany("ClassUsers")
                        .HasForeignKey("Classid")
                        .HasConstraintName("ClassUser_classid_fkey")
                        .IsRequired();

                    b.HasOne("FAMS.Models.User", "User")
                        .WithMany("ClassUsers")
                        .HasForeignKey("Userid")
                        .HasConstraintName("ClassUser_userid_fkey")
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.Models.Permissionrole", b =>
                {
                    b.HasOne("FAMS.Models.Permission", "Permission")
                        .WithMany("Permissionroles")
                        .HasForeignKey("Permissionid")
                        .HasConstraintName("permissionrole_permissionid_fkey")
                        .IsRequired();

                    b.HasOne("FAMS.Models.Role", "Role")
                        .WithMany("Permissionroles")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("permissionrole_roleid_fkey")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FAMS.Models.Syllabus", b =>
                {
                    b.HasOne("FAMS.Models.User", "CreatedbyNavigation")
                        .WithMany("Syllabi")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("syllabus_createdby_fkey");

                    b.Navigation("CreatedbyNavigation");
                });

            modelBuilder.Entity("FAMS.Models.TrainingContent", b =>
                {
                    b.HasOne("FAMS.Models.TrainingUnit", "UnitcodeNavigation")
                        .WithOne()
                        .HasForeignKey("FAMS.Models.TrainingContent", "Unitcode")
                        .HasConstraintName("TrainingContent_unitcode_fkey");

                    b.Navigation("UnitcodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.TrainingMaterial", b =>
                {
                    b.HasOne("FAMS.Models.TrainingUnit", "UnitcodeNavigation")
                        .WithOne()
                        .HasForeignKey("FAMS.Models.TrainingMaterial", "Unitcode")
                        .HasConstraintName("TrainingMaterial_unitcode_fkey");

                    b.Navigation("UnitcodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.TrainingProgramSyllabus", b =>
                {
                    b.HasOne("FAMS.Models.Syllabus", "TopiccodeNavigation")
                        .WithMany("TrainingProgramSyllabi")
                        .HasForeignKey("Topiccode")
                        .HasConstraintName("TrainingProgramSyllabus_topiccode_fkey")
                        .IsRequired();

                    b.HasOne("FAMS.Models.Trainingprogram", "TrainingprogramcodeNavigation")
                        .WithMany("TrainingProgramSyllabi")
                        .HasForeignKey("Trainingprogramcode")
                        .HasConstraintName("TrainingProgramSyllabus_trainingprogramcode_fkey")
                        .IsRequired();

                    b.Navigation("TopiccodeNavigation");

                    b.Navigation("TrainingprogramcodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.TrainingUnit", b =>
                {
                    b.HasOne("FAMS.Models.Syllabus", "TopiccodeNavigation")
                        .WithOne("TrainingUnit")
                        .HasForeignKey("FAMS.Models.TrainingUnit", "Topiccode")
                        .HasConstraintName("TrainingUnit_topiccode_fkey");

                    b.Navigation("TopiccodeNavigation");
                });

            modelBuilder.Entity("FAMS.Models.Trainingprogram", b =>
                {
                    b.HasOne("FAMS.Models.User", "User")
                        .WithMany("Trainingprograms")
                        .HasForeignKey("Userid")
                        .HasConstraintName("trainingprogram_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.Models.User", b =>
                {
                    b.HasOne("FAMS.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("users_roleid_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FAMS.Models.Class", b =>
                {
                    b.Navigation("ClassUsers");
                });

            modelBuilder.Entity("FAMS.Models.Permission", b =>
                {
                    b.Navigation("Permissionroles");
                });

            modelBuilder.Entity("FAMS.Models.Role", b =>
                {
                    b.Navigation("Permissionroles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FAMS.Models.Syllabus", b =>
                {
                    b.Navigation("AsessmentSchemes");

                    b.Navigation("TrainingProgramSyllabi");

                    b.Navigation("TrainingUnit");
                });

            modelBuilder.Entity("FAMS.Models.Trainingprogram", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("TrainingProgramSyllabi");
                });

            modelBuilder.Entity("FAMS.Models.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ClassUsers");

                    b.Navigation("Syllabi");

                    b.Navigation("Trainingprograms");
                });
#pragma warning restore 612, 618
        }
    }
}
