// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FAMS.Migrations
{
    [DbContext(typeof(FAMSContext))]
    partial class FAMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FAMS.src.Domain.Asessment.AsessmentScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Assigment")
                        .HasColumnType("integer");

                    b.Property<int?>("Final")
                        .HasColumnType("integer");

                    b.Property<int?>("Finalpratical")
                        .HasColumnType("integer");

                    b.Property<int?>("Finaltheory")
                        .HasColumnType("integer");

                    b.Property<int?>("Gpa")
                        .HasColumnType("integer");

                    b.Property<int?>("Quiz")
                        .HasColumnType("integer");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("AsessmentScheme");
                });

            modelBuilder.Entity("FAMS.src.Domain.Classroom.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassCode")
                        .HasColumnType("text");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FSU")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrainingProgramCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingProgramcode")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("TrainingProgramCode");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("FAMS.src.Domain.Classroom.ClassUser", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usertype")
                        .HasColumnType("text");

                    b.HasKey("ClassId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassUsers");
                });

            modelBuilder.Entity("FAMS.src.Domain.RoleBase.Permission", b =>
                {
                    b.Property<string>("Permissionid")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Permissionid");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FAMS.src.Domain.RoleBase.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("FAMS.src.Domain.Syllabus.Syllabus", b =>
                {
                    b.Property<Guid>("SyllabusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseObjective")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DeliveryPrinciple")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicalRequirement")
                        .HasColumnType("text");

                    b.Property<string>("TimeLocation")
                        .HasColumnType("text");

                    b.Property<string>("TopicCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingAudience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("SyllabusId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Syllabuses");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.LearningObjective", b =>
                {
                    b.Property<Guid>("LearningObjectiveCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrainingContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("LearningObjectiveCode");

                    b.HasIndex("TrainingContentId");

                    b.ToTable("LearningObjectives");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.OutputStandard", b =>
                {
                    b.Property<Guid>("OutputStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("OutputStandardId");

                    b.ToTable("OutputStandard");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingContent", b =>
                {
                    b.Property<Guid>("TrainingContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutputStandardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingUnitUnitCode")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("Trainingtime")
                        .HasColumnType("interval");

                    b.Property<Guid>("UnitCode")
                        .HasColumnType("uuid");

                    b.HasKey("TrainingContentId");

                    b.HasIndex("OutputStandardId");

                    b.HasIndex("TrainingUnitUnitCode");

                    b.ToTable("TrainingContents");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingMaterial", b =>
                {
                    b.Property<string>("Fileupload")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrainingUnitUnitCode")
                        .HasColumnType("uuid");

                    b.Property<string>("Unitcode")
                        .HasColumnType("text");

                    b.HasKey("Fileupload");

                    b.HasIndex("TrainingUnitUnitCode");

                    b.ToTable("TrainingMaterials");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingProgram", b =>
                {
                    b.Property<Guid>("TrainingProgramCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainingProgramCode");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingProgramSyllabus", b =>
                {
                    b.Property<Guid>("TopicCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingProgramCode")
                        .HasColumnType("uuid");

                    b.Property<string>("Sequence")
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingProgramCode1")
                        .HasColumnType("uuid");

                    b.HasKey("TopicCode", "TrainingProgramCode");

                    b.HasIndex("SyllabusId");

                    b.HasIndex("TrainingProgramCode1");

                    b.ToTable("TrainingProgramSyllabuses");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingUnit", b =>
                {
                    b.Property<Guid>("UnitCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SyllabusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Topiccode")
                        .HasColumnType("text");

                    b.Property<string>("UnitName")
                        .HasColumnType("text");

                    b.HasKey("UnitCode");

                    b.HasIndex("SyllabusId");

                    b.ToTable("TrainingUnits");
                });

            modelBuilder.Entity("FAMS.src.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000012345"),
                            Createdat = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "FAMS@gmail.com",
                            Name = "Admin FAMS",
                            Password = "$2a$11$5rrlnh5BJOlKBTMsrv1jT.2Qj462vbtWc5subwcLR4tPiy1ma.QKe",
                            RoleId = 1,
                            Status = "Inactive",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LearningObjectiveSyllabus", b =>
                {
                    b.Property<Guid>("LearningObjectivesLearningObjectiveCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SyllabusesSyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("LearningObjectivesLearningObjectiveCode", "SyllabusesSyllabusId");

                    b.HasIndex("SyllabusesSyllabusId");

                    b.ToTable("LearningObjectiveSyllabus");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionsPermissionid")
                        .HasColumnType("text");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsPermissionid", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("FAMS.src.Domain.Asessment.AsessmentScheme", b =>
                {
                    b.HasOne("FAMS.src.Domain.Syllabus.Syllabus", "Syllabus")
                        .WithMany("AsessmentSchemes")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FAMS.src.Domain.Classroom.Class", b =>
                {
                    b.HasOne("FAMS.src.Domain.Training.TrainingProgram", "TrainingProgram")
                        .WithMany("Classes")
                        .HasForeignKey("TrainingProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("FAMS.src.Domain.Classroom.ClassUser", b =>
                {
                    b.HasOne("FAMS.src.Domain.Classroom.Class", "Class")
                        .WithMany("ClassUsers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAMS.src.Domain.User.User", "User")
                        .WithMany("ClassUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.src.Domain.Syllabus.Syllabus", b =>
                {
                    b.HasOne("FAMS.src.Domain.User.User", "CreatedByUser")
                        .WithMany("Syllabbuses")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.LearningObjective", b =>
                {
                    b.HasOne("FAMS.src.Domain.Training.TrainingContent", "TrainingContent")
                        .WithMany("LearningObjectives")
                        .HasForeignKey("TrainingContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingContent");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingContent", b =>
                {
                    b.HasOne("FAMS.src.Domain.Training.OutputStandard", "OutputStandard")
                        .WithMany()
                        .HasForeignKey("OutputStandardId");

                    b.HasOne("FAMS.src.Domain.Training.TrainingUnit", "TrainingUnit")
                        .WithMany("TrainingContents")
                        .HasForeignKey("TrainingUnitUnitCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutputStandard");

                    b.Navigation("TrainingUnit");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingMaterial", b =>
                {
                    b.HasOne("FAMS.src.Domain.Training.TrainingUnit", "TrainingUnit")
                        .WithMany("TrainingMaterials")
                        .HasForeignKey("TrainingUnitUnitCode");

                    b.Navigation("TrainingUnit");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingProgram", b =>
                {
                    b.HasOne("FAMS.src.Domain.User.User", "User")
                        .WithMany("Trainingprograms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingProgramSyllabus", b =>
                {
                    b.HasOne("FAMS.src.Domain.Syllabus.Syllabus", "Syllabus")
                        .WithMany("TrainingProgramSyllabuses")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAMS.src.Domain.Training.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgramSyllabus")
                        .HasForeignKey("TrainingProgramCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingUnit", b =>
                {
                    b.HasOne("FAMS.src.Domain.Syllabus.Syllabus", "Syllabus")
                        .WithMany("TrainingUnits")
                        .HasForeignKey("SyllabusId");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FAMS.src.Domain.User.User", b =>
                {
                    b.HasOne("FAMS.src.Domain.RoleBase.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LearningObjectiveSyllabus", b =>
                {
                    b.HasOne("FAMS.src.Domain.Training.LearningObjective", null)
                        .WithMany()
                        .HasForeignKey("LearningObjectivesLearningObjectiveCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAMS.src.Domain.Syllabus.Syllabus", null)
                        .WithMany()
                        .HasForeignKey("SyllabusesSyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("FAMS.src.Domain.RoleBase.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAMS.src.Domain.RoleBase.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAMS.src.Domain.Classroom.Class", b =>
                {
                    b.Navigation("ClassUsers");
                });

            modelBuilder.Entity("FAMS.src.Domain.RoleBase.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FAMS.src.Domain.Syllabus.Syllabus", b =>
                {
                    b.Navigation("AsessmentSchemes");

                    b.Navigation("TrainingProgramSyllabuses");

                    b.Navigation("TrainingUnits");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingContent", b =>
                {
                    b.Navigation("LearningObjectives");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingProgram", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("TrainingProgramSyllabus");
                });

            modelBuilder.Entity("FAMS.src.Domain.Training.TrainingUnit", b =>
                {
                    b.Navigation("TrainingContents");

                    b.Navigation("TrainingMaterials");
                });

            modelBuilder.Entity("FAMS.src.Domain.User.User", b =>
                {
                    b.Navigation("ClassUsers");

                    b.Navigation("Syllabbuses");

                    b.Navigation("Trainingprograms");
                });
#pragma warning restore 612, 618
        }
    }
}
